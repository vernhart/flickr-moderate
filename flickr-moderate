#!/usr/bin/env python3

import flickrapi            # Flickr API library
import os                   # get directory of script for config loading
import yaml                 # config file format
from pprint import pprint   # for debugging


def loadConfig():
    "Get configuration from yaml file"
    script_dir = os.path.dirname(__file__)
    with open(script_dir + "/flickr.yaml", 'r') as yamlfile:
        cfg = yaml.load(yamlfile)
    return cfg

def auth(api_key, api_secret):
    "Initialize API connection"
    flickr = flickrapi.FlickrAPI(api_key, api_secret)

    # authorization tokens are cached so this should only need to be run once on any server
    if not flickr.token_valid(perms='write'):
        flickr.get_request_token(oauth_callback='oob')
        authorize_url = flickr.auth_url(perms='write')
        print("Enter this URL in your browser: %s" % authorize_url)
        verifier = unicode(raw_input('Verifier code: '))
        flickr.get_access_token(verifier)

    return flickr

def isInt(v):
    "Returns true if the string represents an integer"
    v = str(v).strip()
    return v=='0' or (v if v.find('..') > -1 else v.lstrip('-+').rstrip('0').rstrip('.')).isdigit()

def intOrString (string):
    "If the string represents an integer, returns an integer, otherwise returns the string"
    if isInt(string): return int(string)
    else: return string


def get_groups (flickr, user_id):
    "Get all Fav/View groups that we are a member of"
    groups = flickr.people.getGroups(user_id=user_id)
    views = {}
    favs = {}
    for node in groups.iter():
        group = node.items()
        if len(group) > 1:
            info = {'icon': 'https://www.flickr.com/images/buddyicon.gif'}
            for pair in group:
                info[pair[0]] = intOrString(pair[1])
            
            if info['iconserver'] > 0:
                info['icon'] = 'http://farm%d.staticflickr.com/%d/buddyicons/%s.jpg' % (info['iconfarm'], info['iconserver'], info['nsid'])
            
            if 'Views:' in info['name']:
                mincount = int(info['name'][6:].replace(',', ''))
                views[mincount] = info
            if 'Favorites:' in info['name']:
                if '&lt;5' in info['name']: mincount = 1
                else: mincount = int(info['name'][10:].replace(',', ''))
                favs[mincount] = info
    return {'views': views, 'favs': favs}

def groupSummaryIcons(groups):
    "Generate a summary of the various view/fav groups suitable for their description field"

    summary = ["No nudity or pornography allowed!! These pictures ",
        "will be removed without explaination.\n\n",
        "In order to keep the pools at a reasonable size, so everybody's ",
        "pictures can be seen and favorited, please <b>keep each picture ",
        "in ONLY 1 &quot;Views: <i>xx</i>&quot; and 1 &quot;Favorites: ",
        "<i>xx</i>&quot; group at a time.</b> (2 groups total for each picture.)\n"]

    summary.append('\n<b>*** Views Groups ***</b>\n')

    for mincount, info in sorted(groups['views'].items()):
        summary.append('<a href="http://www.flickr.com/groups/views%s/"><img src="%s"></a> '
            % (mincount, info['icon']))

    summary.append('\n<b>*** Favorites Groups ***</b>\n')

    for mincount, info in sorted(groups['favs'].items()):
        summary.append('<a href="http://www.flickr.com/groups/favs%s/"><img src="%s"></a> '
            % (mincount, info['icon']))

    return(''.join(summary))

def groupSummaryDots(groups):
    "Generate a summary of the various view/fav groups suitable for their description field"

    summary = ["\n\nNo nudity or pornography allowed!! These pictures ",
        "will be removed without explaination.\n\n",
        "In order to keep the pools at a reasonable size, so everybody's ",
        "pictures can be seen and favorited, please <b>keep each picture ",
        "in ONLY 1 &quot;Views: <i>xx</i>&quot; and 1 &quot;Favorites: ",
        "<i>xx</i>&quot; group at a time.</b> (2 groups total for each picture.)\n"]

    max = 0
    for mincount, info in groups['views'].items():
        if info['pool_count'] > max: max = info['pool_count']

    summary.append('\n<b>*** Views Groups ***</b>\n')

    for mincount, info in sorted(groups['views'].items()):
        summary.append('<a href="http://www.flickr.com/groups/views%s/">%s</a> %s %d Photos\n'
            % (mincount, info['name'], '.' * round(info['pool_count']/max*100), info['pool_count']))

    max = 0
    for mincount, info in groups['favs'].items():
        if info['pool_count'] > max: max = info['pool_count']

    summary.append('\n<b>*** Favorites Groups ***</b>\n')

    for mincount, info in sorted(groups['favs'].items()):
        summary.append('<a href="http://www.flickr.com/groups/favs%s/">%s</a> %s %d Photos\n'
            % (mincount, info['name'], '.' * round(info['pool_count']/max*100), info['pool_count']))

    return(''.join(summary))

def setGroupDescription(group, summary):
    "Sets the given group's description to a view/fav line plus the boilerplate summary"
    # this function doesn't do anythig. there's no way to set a group's description via the api

    if "Favorites:" in group['name']:
        mincount = group['name'][10:]
        what = 'favorites'
    elif "Views:" in group['name']:
        mincount = group['name'][6:]
        what = 'views'

    text = ''.join(("This group is for any photo with <b>at least %s %s</b> when entering the pool.\n"
        % (mincount, what), summary))

    #print(text)

    return


def scanGroups(flickr, groups):
    "Scans through fav/views groups and removes images that don't qualify"

    prevmin = 9999999999
    seenphotos = []
    for mincount, info in sorted(groups['views'].items(), reverse=True):
        # only work with groups we can invite/reject photos to/from
        if info['admin']:
            print('===== %s =====' % info['name'])
            pages = 1
            i = 0
            while i < pages:
                i=i+1
                photos = flickr.groups.pools.getPhotos(group_id=info['nsid'], page=i, extras='views,faves,favorites,favs', format='parsed-json')
                #pprint(photos)
                pages = photos['photos']['pages']
                for photo in photos['photos']['photo']:
                    if int(photo['views']) < mincount:
                        print("Should not be in this group!! %s" % photo['views'])
                        resp = flickr.groups.pools.remove(photo_id=photo['id'], group_id=info['nsid'])
                    if int(photo['views']) >= prevmin:
                        # we can only add photos to a group if the photo is our own
                        # and the api doesn't have a way to invite a photo to a group
                        print("Should be in higher group (%s) %s" %
                            (bestGroup(groups, views=int(photo['views'])),
                            "https://www.flickr.com/photos/%s/%s" % (photo['owner'], photo['id'])))
                    # if we've seen this photo before, it must already be in a higher group
                    if photo['id'] in seenphotos:
                        print("Photo is already in another view group %s" % photo['id'])
                        resp = flickr.groups.pools.remove(photo_id=photo['id'], group_id=info['nsid'])
                    else:
                        seenphotos.append(photo['id'])
        prevmin = mincount
        print("Seen photos: %d" % len(seenphotos))


    ### now we need to do the same thing with favs
    ### trouble is, favs are not shown in the getPhotos search so we have to query
    ### the api for every photo to see how many favs they have

    return


def bestGroup(groups, views=-1, favs=-1):
    "Given a number of views or favorites, will return the name of the best group"

    prevgroup = 'None'
    if views > 0:
        for mincount, info in sorted(groups['views'].items()):
            if views < mincount:
                return(prevgroup)
            prevgroup = info['name']
        return(prevgroup)

    prevgroup = 'None'
    if favs > 0:
        for mincount, info in sorted(groups['favs'].items()):
            if favs < mincount:
                return(prevgroup)
            prevgroup = info['name']
        return(prevgroup)

    # need to specify either views or favs as non-negative a parameter
    return('None')

def main():
    "Main function"

    cfg = loadConfig()
    flickr = auth(cfg['api_key'],cfg['api_secret'])

    groups = get_groups(flickr, cfg['user_nsid'])
    #pprint(groups['views'])

    #group_summary = groupSummaryIcons(groups)
    #print(group_summary)

    scanGroups(flickr, groups)


if __name__ == "__main__":
    main()

#response = flickr.groups.pools.getPhotos(group_id=u'3773081@N22', per_page=3, format='parsed-json')
#pprint(response)
