#!/usr/bin/env python3

from common import *        # common function library
from pprint import pprint   # for debugging
from tendo import singleton # run only one copy


def groupSummaryIcons(groups):
    "Generate a summary of the various view/fav groups suitable for their description field"

    summary = ["No nudity or pornography allowed!! These pictures ",
        "will be removed without explaination.\n\n",
        "In order to keep the pools at a reasonable size, so everybody's ",
        "pictures can be seen and favorited, please <b>keep each picture ",
        "in ONLY 1 &quot;Views: <i>xx</i>&quot; and 1 &quot;Favorites: ",
        "<i>xx</i>&quot; group at a time.</b> (2 groups total for each picture.)\n"]

    summary.append('\n<b>*** Views Groups ***</b>\n')

    for mincount, info in sorted(groups['views'].items()):
        summary.append('<a href="http://www.flickr.com/groups/views%s/"><img src="%s"></a> '
            % (mincount, info['icon']))

    summary.append('\n<b>*** Favorites Groups ***</b>\n')

    for mincount, info in sorted(groups['favs'].items()):
        summary.append('<a href="http://www.flickr.com/groups/favs%s/"><img src="%s"></a> '
            % (mincount, info['icon']))

    return(''.join(summary))

def groupSummaryDots(groups):
    "Generate a summary of the various view/fav groups suitable for their description field"

    summary = ["\n\nNo nudity or pornography allowed!! These pictures ",
        "will be removed without explaination.\n\n",
        "In order to keep the pools at a reasonable size, so everybody's ",
        "pictures can be seen and favorited, please <b>keep each picture ",
        "in ONLY 1 &quot;Views: <i>xx</i>&quot; and 1 &quot;Favorites: ",
        "<i>xx</i>&quot; group at a time.</b> (2 groups total for each picture.)\n"]

    max = 0
    for mincount, info in groups['views'].items():
        if info['pool_count'] > max: max = info['pool_count']

    summary.append('\n<b>*** Views Groups ***</b>\n')

    for mincount, info in sorted(groups['views'].items()):
        summary.append('<a href="http://www.flickr.com/groups/views%s/">%s</a> %s %d Photos\n'
            % (mincount, info['name'], '.' * round(info['pool_count']/max*100), info['pool_count']))

    max = 0
    for mincount, info in groups['favs'].items():
        if info['pool_count'] > max: max = info['pool_count']

    summary.append('\n<b>*** Favorites Groups ***</b>\n')

    for mincount, info in sorted(groups['favs'].items()):
        summary.append('<a href="http://www.flickr.com/groups/favs%s/">%s</a> %s %d Photos\n'
            % (mincount, info['name'], '.' * round(info['pool_count']/max*100), info['pool_count']))

    return(''.join(summary))

def setGroupDescription(group, summary):
    "Sets the given group's description to a view/fav line plus the boilerplate summary"
    # this function doesn't do anythig. there's no way to set a group's description via the api

    if "Favorites:" in group['name']:
        mincount = group['name'][10:]
        what = 'favorites'
    elif "Views:" in group['name']:
        mincount = group['name'][6:]
        what = 'views'

    text = ''.join(("This group is for any photo with <b>at least %s %s</b> when entering the pool.\n"
        % (mincount, what), summary))

    #print(text)

    return






def main():
    "Main function"

    me = singleton.SingleInstance()

    cfg = loadConfig()
    flickr = auth(cfg['api_key'],cfg['api_secret'])

    groups = get_groups(flickr, cfg['user_nsid'])

    mainstarttime = datetime.now()
    scanGroups(flickr, groups, 'views')
    scanGroups(flickr, groups, 'favs')
    print('Total elapsed time: %58s' % (datetime.now() - mainstarttime))


if __name__ == "__main__":
    main()

