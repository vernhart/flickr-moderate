#!/usr/bin/env python3

from common import *        # common function library
import sys                  # for argv stuff
import getopt               # command line argumnts
import string               # for filter in arg sanitizing


def usage():
    print('Usage: %s [options] [GROUPCOUNT]' % sys.argv[0])
    print('\nOptions:')
    print('  -h, --help             Show this help message and exit')
    print('  -v, --views            Process Views groups')
    print('  -f, --favs             Process Favorites groups')
    print('  -n, --noop             Do the scan without any removals, posts, or deletes')
    print('  -l, --lock=name        Use a lock file to avoid multiple runs of the same process')
    print('  -p, --pages=N          Only scan the first N pages of the group or groups')
    print('\nGROUPCOUNT may be repeated to scan multiple groups.')
    print('If GROUPCOUNT is ommited, all groups of the given type (views or favs) will be scanned.')
    return

def main(argv):
    "Main function"

    try:
        opts, args = getopt.getopt(argv, "hvfnl:p:", ["help", "views", "favs", "faves", "favorites",
            "noop", "lock=", "pages="])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    checkcounts = []
    testrun = False
    vieworfav = None
    for arg in args:
        arg = intOrString(arg)
        if isinstance(arg, int):
            if arg > 0:
                checkcounts.append(arg)
    if len(checkcounts) == 0:
        checkcounts = None

    cfg = loadConfig()
    flickr = auth(cfg['api_key'],cfg['api_secret'])

    groups = get_groups(flickr, cfg['user_nsid'])

    lockname = None
    pages = -1

    for opt, arg in opts:
        if opt in ('-n', '--noop'):
            print('doing test run')
            testrun = True
        elif opt in ('-h', '--help'):
            usage()
            sys.exit()
        elif opt in ('-v', '--view', '--views'):
            vieworfav = 'views'
        elif opt in ('-f', '--favs', '--faves', '--favorites'):
            vieworfav = 'favs'
        elif opt in ('-l', '--lock'):
            # limit lockname to just alphanumeric [a-zA-Z0-9]
            arg = charFilter(arg, string.ascii_letters + string.digits)
            if arg == '':
                print('ERROR: lock file name must be alphanumeric')
                usage()
                sys.exit(2)
            lockname = arg
        elif opt in ('-p', '--pages'):
            # page must be a positive integer
            arg = charFilter(arg, string.digits)
            if arg == '' or arg == '0':
                print('ERROR: page must be a positive non-zero integer')
                usage()
                sys.exit(2)
            pages = int(arg)

    if lockname is not None:
        runlock = lockScan(lockname)
        if not runlock['locked']:
            #print('We're already running with this lock file, skip run');
            sys.exit(0)

    mainstarttime = datetime.now()

    if checkcounts is not None and vieworfav is None:
        # we gave a checkcount arg but didn't specify -v or -f
        print('ERROR: %s requires either --views or --favs' % sys.argv[0])
        usage()
        sys.exit()
    elif vieworfav is None:
        # must give -v or -f
        usage()
        sys.exit(2)
    else:
        scanGroups(flickr, groups, vieworfav, testrun=testrun, checkcounts=checkcounts, maxpages=pages)

    if lockname is not None:
        unlockScan(runlock)

    print('Total elapsed time: %58s' % (datetime.now() - mainstarttime))


if __name__ == "__main__":
    main(sys.argv[1:])

