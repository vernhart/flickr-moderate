#!/usr/bin/env python3

from common import *        # general functions
from pprint import pprint   # for debugging
from time import sleep,time # for pauses


def favGroupScan(flickr, db, groups):
    "Scans through the favorites groups for all the photos to check"

    updated = 0
    for mincount, info in sorted(groups['favs'].items(), reverse=True):
        if mincount >= 200:
            #print('===== %s =====' % info['name'])
            pages = 1
            i = 0
            while i < pages:
                i=i+1
                photos = flickr.groups.pools.getPhotos(group_id=info['nsid'], page=i, extras='url_n')
                pages = photos['photos']['pages']

                for photo in photos['photos']['photo']:
                    if shouldUpdateFavs(db, groups, photo['id']):
                        updated = updated+1
                        favs = getFavsFromFlickr(flickr, photo['id'])
                        saveFavs(db, photo['id'], favs)

    print("favs updated: %s" % updated)

    return



def shouldUpdateFavs(db, groups, photo_id):
    "returns true when the favorites field should be updated"

    favs = db.hget(photo_id, 'favs')
    ts   = db.hget(photo_id, 'ts')

    # always update favs if data missing
    if favs is None:
        return(True)

    # if favs is not None but ts is, must mean someone else is updating. skip it
    if ts is None:
        return(False)

    # only update zero favs once a day
    if int(favs) == 0:
        if time() > float(ts) + (24*60*60):
            return(True)
        else:
            return(False)

    # update favs when timestamp is older than 7 days
    if time() > float(ts) + (7*24*60*60):
        return(True)

    group = bestGroup(groups, favs=int(favs))
    percentage = (int(favs) - group['mincount']) / (group['nextgroup'] - group['mincount'])

    # if 50% of the way there, update every 2 days
    if time() > float(ts) + (2*24*60*60) and percentage > 0.50:
        return(True)

    # if 75% of the way there, update every day
    if time() > float(ts) + (24*60*60) and percentage > 0.75:
        return(True)

    # if 90% of the way there, update every 12 hours
    if time() > float(ts) + (12*60*60) and percentage > 0.90:
        return(True)

    # if 95% of the way there, update every hour
    if time() > float(ts) + (60*60) and percentage > 0.95:
        return(True)

    # if 99% of the way there, update every 10 minutes
    if time() > float(ts) + (10*60) and percentage > 0.99:
        return(True)

    return(False)





def main():
    "Main function"

    cfg = loadConfig()
    flickr = auth(cfg['api_key'], cfg['api_secret'])
    db = redisAuth(cfg)

    groups = get_groups(flickr, cfg['user_nsid'])

    favGroupScan(flickr, db, groups)



if __name__ == "__main__":
    main()
